1. Что такое тестирование программного обеспечения?
Тестирование программного обеспечения - процесс в рамках жизненного цикла разработки программного обеспечения, который оценивает качество компонента или системы, а также связанных с ними рабочих продуктов. (ISTQB)

2. Что такое качество программного обеспечения?
Качество программного обеспечения – комплекс характеристик программного продукта, определяющих способность выполнять возложенные на него функции.

3. Когда начинать и заканчивать тестирование?
Когда начинать - «Сразу же, как только это становится возможным» 
Когда заканчивать - Когда с точки зрения бизнеса оно будет уже нецелесообразным. 
Другими словами – когда дальнейшее тестирование будет стоить дороже, чем выгоды от него.

4. Какие знаете цели тестирования программного обеспечения?
Оценка рабочих продуктов, таких как требования, пользовательские истории, проекты и код.
Провоцирование отказов и обнаружение дефектов.
Обеспечение необходимого покрытия объекта тестирования.
Снижение уровня риска ненадлежащего качества программного обеспечения.
Проверка выполнения зафиксированных требований.
Проверка того, что объект тестирования соответствует контрактным, юридическим и
нормативным требованиям.
Предоставление информации заинтересованным сторонам для принятия обоснованных
решений.
Создание уверенности в качестве объекта тестирования.
Проверка того, завершен ли объект тестирования и работает ли он так, как ожидают
заинтересованные стороны

5. Quality Assurance- это?
Обеспечение качества (quality assurance) – активности, направленные на обеспечение уверенности в том, что требования к качеству будут выполнены.

6. Quality Control - это?
Контроль качества (quality control) – набор действий, предназначенных для оценивания качества компонента или системы.

7. Тестирование - это?
Тестирование (testing) - процесс в рамках жизненного цикла разработки программного обеспечения, который оценивает качество компонента или системы, а также связанных с ними рабочих продуктов. 

8. Какие знаете принципы тестирования?
1 принцип - Тестирование демонстрирует наличие дефектов
2 принцип - Полное (исчерпывающее) тестирование невозможно
3 принцип - Раннее тестирование 
4 принцип - Скопление (кластеризация) дефектов 
5 принцип - Парадокс пестицида 
6 принцип - Тестирование зависит от контекста 
7 принцип - Заблуждение об отсутствии ошибок 

9. Что такое верификация?
Верификация (verification) – это процесс оценки системы или ее компонентов с целью определения того, удовлетворяют ли результаты текущего этапа разработки условиям, сформированным в начале этого этапа. То есть, выполняются ли задачи, цели и сроки по разработке продукта.

10. Что такое валидация?
Валидация (validation) – это определение соответствия разрабатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе.

11. Перечислите характеристики качества программного обеспечения и их атрибуты.
Основные характеристики качества программного обеспечения согласно стандарту ISO/IEC 25010:2011:
Функциональность. ПО признается функциональным, если выполняет возложенные на него задачи, отвечает заданным потребностям пользователей. Данный аспект предполагает правильную и точную работу, совместимость всех входящих в состав компонентов.
Надежность. Под надежностью ПО понимают бесперебойное выполнение возлагаемых на него задач на заданных условиях в течение установленного времени.
Юзабилити (удобство использования). Этот параметр характеризует степень удобства ПО для пользователей, его наглядность, легкость эксплуатации и изучения.
Эффективность. Параметру соответствует степень обеспечения продуктом необходимой производительности при заданных условиях.
Удобство сопровождения. Этот показатель характеризует простоту анализа, тестирования, коррекции компонентов ПО, его обслуживания, а также степень адаптации к новым условиям.
Портативность. Степень легкости его переноса на другую платформу. Обеспечение качества ПО предполагает его проверку по каждому из перечисленных параметров, выявление слабых сторон и устранение неисправностей.
Совместимость. Способность программных компонентов взаимодействовать друг с другом.
Защищенность. Минимизация угроз, связанных с несанкционированным чтением, изменением информации и т. д. Угрозы могут быть также связаны с некорректным использованием ПО, внешним воздействием со стороны посторонних лиц, выходом из строя технических средств.

12. Что такое приемка приложения?
Приемка приложения — это процесс оценки и проверки готового программного продукта (в данном случае, приложения) с целью удостоверения его соответствия требованиям и ожиданиям заказчика или конечных пользователей. 

13. Что такое аудит приложения?
Аудит приложения — это процесс оценки и анализа приложения, направленный на выявление его сильных и слабых сторон, а также рисков, связанных с безопасностью, производительностью и соответствием требованиям. 

14. Этапы проведения аудита.

1) Подготовительный этап:
Определение целей и объема аудита.
Сбор информации о приложении, его архитектуре и технологиях.
Идентификация заинтересованных сторон и формирование команды аудиторов.
2) Анализ документации:
Изучение проектной документации, спецификаций и функциональных требований.
Анализ архитектуры приложения и структуры базы данных.
Оценка политики безопасности и практик разработки.
3) Инвентаризация и классификация активов:
Выявление всех компонентов приложения (серверы, базы данных, API и т.д.).
Классификация активов по уровню важности и критичности.
4) Тестирование безопасности:
Проведение статического анализа кода (SAST) для выявления уязвимостей.
Выполнение динамического тестирования (DAST) для оценки безопасности приложения в реальном времени.
Использование инструментов и методик для проверки на наличие распространенных уязвимостей (например, SQL-инъекции, XSS).
5) Оценка производительности:
Проведение нагрузочного тестирования для определения, как приложение справляется с высокими нагрузками.
Оценка времени отклика и общего времени выполнения операций.
6) Оценка соответствия требованиям:
Проверка на соответствие требованиям законодательства, стандартам (например, GDPR, PCI-DSS) и внутренним политикам организации.
7) Проверка пользовательского интерфейса:
Оценка удобства использования и доступности приложения.
Тестирование на соответствие стандартам UI/UX.
8) Составление отчета об аудите:
Формулирование выявленных уязвимостей и проблем.
Подготовка рекомендаций по улучшению безопасности и производительности приложения.
Создание плана действий по устранению выявленных недочетов.
9) Презентация результатов:
Проведение встречи с заинтересованными сторонами для обсуждения результатов аудита.
Ответы на вопросы и обсуждение рекомендаций.
10) Мониторинг и повторный аудит:
Установление процесса мониторинга выявленных уязвимостей и внедренных изменений.
Планирование повторного аудита для оценки исправлений и улучшений.

15. Чем приемка приложения отличается от аудита?
Приемка приложения фокусируется на его готовности к использованию, в то время как аудит оценивает его качество и соответствие стандартам. Оба процесса важны для обеспечения успешного функционирования и разработки высококачественного программного обеспечения.

16. Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.
Метрики тестирования – это количественные показатели, используемые для оценки процесса тестирования, качества программного обеспечения и состояния проекта. 
Основные типы метрик тестирования включают:
1). Метрики качества продукта
Количество дефектов – общее количество найденных ошибок в продукте.
Плотность дефектов – количество дефектов на определенный объем кода (например, на 1000 строк кода).
Серьезность дефектов – классификация дефектов по степени их влияния на функциональность.
2). Метрики процесса тестирования
Процент завершенных тестов – доля тестов, которые успешно пройдены относительно общего числа запланированных тестов.
Время на тестирование – общее время, затраченное на выполнение тестов.
Возврат инвестиций (ROI) тестирования – соотношение между стоимостью тестирования и уровнем качества (например, количество найденных дефектов на затраченные средства).
3). Метрики покрытия тестирования
Покрытие кода – процент кода, который был протестирован, по отношению к общему объему кода.
Покрытие требований – процент тестов, которые охватывают заданные требования.
4. Метрики эффективности тестирования
Процент автоматизированных тестов – доля тестов, которые автоматизированы по сравнению с общим количеством тестов.
Среднее время отклика на дефект – среднее время, необходимое для исправления найденных дефектов.

Цели ввода метрик
Оценка качества продукта – метрики помогают выявить качество программного обеспечения, его стабильность и готовность к выпуску.
Оптимизация процесса тестирования – метрики позволяют анализировать эффективность процесса тестирования, выявить узкие места и улучшить подходы.
Планирование и управление – с помощью метрик можно лучше планировать ресурсы, сроки и объемы тестирования.
Коммуникация – метрики обеспечивают прозрачность и возможность донесения информации о состоянии проекта до заинтересованных сторон.

Примеры метрик
Количество тестовых случаев – общее количество тестов, выполненных в рамках проекта.
Процент найденных и исправленных дефектов – отношение исправленных дефектов к общему количеству найденных.
Сравнение планируемого и фактического времени тестирования – как фактическое время соотносится с плановым.
Метрики тестирования играют ключевую роль в управлении качеством программного обеспечения и позволяют принимать обоснованные решения на всех этапах разработки.документов к указанному в их списке. 
Наглядность и полнота документации
