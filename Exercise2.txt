1. Что такое проект?
Проект в тестировании - это конкретная задача или набор задач, направленных на проверку качества ПО. 

2. Из каких этапов состоит Waterfall model/Каскадная модель?
1). Анализ требований: Этот этап включает взаимодействие с заказчиком для понимания того, что необходимо реализовать.
2). Проектирование: Создание архитектуры системы и проектирование ее компонентов. Здесь разрабатываются как высокоуровневые, так и детализированные спецификации.
3). Кодирование: На этом этапе разработчики пишут код, основываясь на проектной документации. Реализуются все функциональные компоненты системы.
4). Тестирование: Проведение тестирования для выявления и исправления ошибок. На этом этапе проверяется соответствие реализованных функций их требованиям.
5). Внедрение: Установка и настройка системы в рабочую среду́, а также обучение пользователей.
6). Поддержка: Обеспечение технической поддержки и исправление ошибок в процессе эксплуатации системы, включая внесение изменений на основе отзывов пользователей.
Каждый из этих этапов должен быть завершен до перехода к следующему, и, как правило, водопадная модель менее гибкая, чем современные итеративные подходы.

3. Какие преимущества и недостатки Waterfall model/Каскадной модели?
Преимущества водопадной модели: 
1). Простота: Линейная структура облегчает понимание процесса разработки. Каждый этап отчетливо обозначен.
2). Четкие требования: Поскольку требования собираются в начале, это помогает избежать путаницы в дальнейших этапах.
3). Документированность: Модель предполагает наличие обширной документации на каждом этапе, что облегчает управление проектом.
4). Легкая оценка прогресса: Каждый этап завершен до перехода к следующему, что упрощает отслеживание статуса проекта.
5). Подходит для небольших проектов: В некоторых случаях, особенно для малых и средних проектов, водопадная модель может быть достаточно эффективной.

Недостатки водопадной модели:
1). Негибкость: Изменения на поздних стадиях разработки могут быть дорогими и сложными, так как они требуют возврата к предыдущим этапам.
2). Риски неполных требований: Если вначале не удается определить все требования, это может привести к серьезным проблемам в будущем.
3). Поздняя доставка: Тестирование происходит только после завершения кодирования, что может выявить ошибки и недочеты слишком поздно в процессе.
4). Сложность в управлении изменениями: Если в процессе разработки появляются новые требования, их внедрение может вызвать значительные затруднения.
5). Неэффективность для крупных проектов: Для проектов с высоким уровнем сложности и изменения требований водопадная модель может оказаться неэффективной.
С точки зрения же тестирования эта модель плоха тем, что тестирование в явном виде появляется здесь лишь с середины развития проекта, достигая своего максимума в самом конце.

4. Из каких этапов состоит V-model/V- модель?
V-модель является логическим развитием водопадной. Упрощенно говоря, мы видим те же стадии, что и в водопадной модели, только нижняя половина “водопада” развернута вверх, образуя форму буквы “V”. В этой модели, как и в водопадной, каждая стадия начинается строго после окончания предыдущей. 
Представляет собой расширение традиционной водопадной модели, акцентируя внимание на важности тестирования на каждом этапе разработки. Основные этапы V-модели можно разбить на две больших категории: этапы разработки и этапы тестирования.

Этапы разработки:
Определение требований: Сбор и анализ требований к системе от заинтересованных сторон.
Проектирование системы: Подробное проектирование архитектуры и компонентов системы с учетом собранных требований.
Проектирование модуля: Декомпозиция системы на отдельные модули и определение интерфейсов между ними.
Кодирование: Реализация модулей, написание кода на выбранном языке программирования.
Этапы тестирования:
Приемочное тестирование: Проверка системы в целом на соответствие требованиям. Этот этап соответствует первому этапу проектирования.
Системное тестирование: Тестирование системы как единого целого, чтобы проверить ее взаимодействие.
Интеграционное тестирование: Тестирование взаимодействия между модулями, чтобы убедиться, что они работают вместе как единое целое.
Модульное тестирование: Тестирование отдельных модулей на соответствие их

5. Когда использовать V-model/V- модель?
Если проекту требуются детально проработанные требования и не ожидается значительных изменений на протяжении жизненного цикла, V-модель будет идеальным выбором, обеспечивая стабильность и предсказуемость процесса
V-модель обеспечивает строгий контроль на каждом этапе разработки и тестирования, что делает её особенно полезной для проектов, где критически важны безопасность, надежность и соответствие строгим стандартам, где ошибки могут иметь серьезные последствия
Когда проект требует соблюдения специфических стандартов (например, ISO*, IEC*, FDA*), V-модель с её акцентом на документацию и соответствие требованиям обеспечивает необходимый уровень контроля

6. Из каких этапов состоит Iterative model/Итеративная модель?
Итеративная модель разработки программного обеспечения состоит из нескольких этапов, которые повторяются в цикле до достижения удовлетворительного результата. 
Основные этапы включают:
Планирование: На этом этапе определяются цели проекта, рассматриваются требования и оценивается объем работ. Проектная команда разрабатывает план для следующей итерации.
Анализ требований: Сбор и анализ требований системы. Это может быть часть бизнес-требований и функциональных требований от заинтересованных сторон.
Дизайн: Проектирование архитектуры и компонентов системы на основе собранных требований. Этот этап может включать создание прототипов для визуализации конечного продукта.
Разработка: Программирование и реализация компонентов системы. На этом этапе создается работающий код, который будет представлен в следующей итерации.
Тестирование: Проведение тестов для выявления ошибок и проблем в разработанном коде. Это включает как модульные, так и интеграционные тесты.
Обратная связь: Сбор отзывов от пользователей или заинтересованных сторон на основе результатов итерации. Это помогает выявить области для улучшения и уточнения требований.
Ревизия и доработка: На основе полученной обратной связи команды вносят изменения и доработки в проект. Этот этап может включать улучшения функциональности, производительности и надежности системы.
Повторение шага: Цикл повторяется с начала, начиная с планирования следующей итерации, на основе доработанного понимания требований и полученного опыта.

7. Когда использовать Iterative model/Итеративной модели?
Итеративная модель разработки программного обеспечения используется в ситуациях, когда:
Изменяемые требования: Когда требования к проекту могут изменяться в процессе его разработки, итеративная модель позволяет встраивать изменения на каждом этапе.
Высокий уровень неопределенности: Если проект характеризуется высокой степенью неопределенности, итеративная модель позволяет уточнять и корректировать подход по мере получения обратной связи и проведения тестирований.
Частый ввод обратной связи: Если важно регулярно получать обратную связь от клиентов или пользователей, итеративная модель способствует этому, позволяя демонстрировать промежуточные результаты на ранних этапах.
Постепенная доработка: Итеративная модель подходит для проектов, где задача состоит в том, чтобы постепенно улучшать и дорабатывать продукт, минуя этап полного завершения всех функций на ранних фазах.
Сложные системы: В больших и сложных проектах итеративная модель помогает разбить работу на более управляемые части, что облегчает координацию и управление.
Команда с опытом: Итеративная модель работает лучше всего, когда команда разработки имеет опыт и может эффективно управлять изменениями и адаптациями в процессе работы.
В целом, итеративная модель подходит для проектов, где гибкость и адаптивность являются критически важными для успешного завершения.

8. Плюсы и минусы Iterative model/Итеративной модели?
Плюсы итеративной модели:
Гибкость: Возможность вносить изменения на каждом этапе разработки позволяет адаптироваться к изменяющимся требованиям и предпочтениям заказчика.
Раннее выявление дефектов: Поскольку продукт проверяется и тестируется после каждой итерации, ошибки могут быть обнаружены и исправлены на ранних стадиях разработки.
Постепенное улучшение: Постепенное добавление функций и возможностей позволяет выявлять и улучшать слабые места, реагируя на отзывы пользователей.
Улучшенное взаимодействие с клиентом: Регулярные итерации и демонстрации продукта помогают поддерживать связь с клиентом и учитывать его пожелания.
Сокращение рисков: Постепенное выполнение работы позволяет распределить риски и сократить вероятность фатальных ошибок в конечном продукте.

Минусы итеративной модели:
Непредсказуемость: Частые изменения потребностей могут привести к увеличению сроков и затрат, так как итерации могут затягиваться.
Необходимость в стабильных требованиях: Если требования часто меняются, это может привести к путанице и неэффективности работы команды.
Сложность управления: Увеличение числа итераций может усложнить процесс управления проектом, особенно если не установлены четкие правила и процедуры.
Потребность в более высококвалифицированных специалистах: Для успешной реализации итеративной модели необходимы опытные разработчики и менеджеры, способные быстро адаптироваться к изменениям.
Более высокий уровень вовлеченности: Необходимость постоянного взаимодействия с клиентом и заинтересованными сторонами может требовать дополнительных усилий со стороны команды.

В целом, итеративная модель может быть очень эффективной в условиях быстро меняющихся требований, однако для ее успешного применения нужен правильный подход к управлению проектом и команде.

9. Agile - это?
Agile - подход к управлению проектами, предполагающий разбивку проекта на этапы, а также непрерывное сотрудничество и совершенствование. В рамках этого подхода команды следуют циклу планирования, выполнения и оценки.

10. Agile манифест - это?
Agile манифест - ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки программного обеспечения.

11. Какие ценности Agile манифест?
Люди и взаимодействие важнее процессов и инструментов
Работающий продукт важнее исчерпывающей документации
Сотрудничество с заказчиком  важнее согласования условий контракта
Готовность к изменениям важнее следования первоначальному плану

12. Основные принципы Agile манифест?
Принцип 1: Удовлетворение клиента
Принцип 2: Приветствие изменений
Принцип 3: Частая поставка
Принцип 4: Ежедневное сотрудничество
Принцип 5: Мотивированные люди
Принцип 6: Разговор вживую
Принцип 7: Работающее программное обеспечение
Принцип 8: Устойчивое развитие
Принцип 9: Техническое совершенство
Принцип 10: Простота
Принцип 11: Самоорганизация команд
Принцип 12: Постоянное улучшение

13. Scrum - это? (опишите подробно)
Scrum — это методика гибкого управления проектами, которая помогает командам структурировать свою работу и управлять ею с помощью набора ценностей, принципов и практик.
Scrum строится на коллективном разуме людей, использующих его. Вместо того, чтобы предоставлять людям подробные инструкции, правила Scrum направляют их отношения и взаимодействия.
Ценности Scrum: Успешное использование Scrum зависит от того, насколько хорошо люди умеют жить в соответствии с пятью ценностями: преданность, целеустремленность, открытость, уважение и смелость.
Команда Scrum обязуется достигать своих целей и поддерживать друг друга. Их основное внимание сосредоточено на работе спринта, чтобы добиться наилучшего возможного прогресса в достижении этих целей. Команда Scrum и ее заинтересованные стороны открыто говорят о работе и трудностях. Члены команды Scrum уважают друг друга за то, что они способны, независимы, и уважаются как таковые людьми, с которыми они работают. Члены команды Scrum имеют смелость поступать правильно, работать над сложными проблемами.

14. Что такое Velocity / Capacity?
Velocity (производительность/скорость), capacity (мощность) - метрики в Scrum, которые помогают измерить прогресс.
Также существуют метрики focus factor и метрика удовлетворенности участников команды прошлым спринтом.

Velocity- это величина, отражающая количество работы, которое Скрам-команда может выполнить за один Спринт (короткий регулярный цикл работы длиной не более четырех недель). 
Производительность Скрам-команды часто называют скоростью, поскольку это буквальный перевод Velocity —англоязычного термина из Scrum. 

Capacity (дословно мощность, нагрузка; производительность) отражает фактическую доступность команды для работы. 
Другими словами: это объем работы, который команда или разработчик может выполнить за определенный период времени с учетом имеющихся ресурсов. 
Зависит от факторов: 
количество доступных разработчиков, 
время, затрачиваемое на совещания, 
другие обязательства (например отпуск, болезни.

15. Преимущества и недостатки Scrum
Гибкость и адаптивность
SCRUM позволяет легче адаптировать проект к изменениям, чем при традиционном подходе. Дает возможность быстро вносить изменения, гибко реагируя на изменения на рынке или другие важные обстоятельства. Не слепо следовать плану и расписанию, а уметь приоритизировать задачи в зависимости от потребностей клиентов.
Более быстрая доставка продукта
На каждом отдельном этапе выходит готовый к употреблению продукт и с каждым новым спринтом этот продукт меняется. Это позволяет быстро подстраиваться под изменения внешней среды. 
Контроль и управление рисками:
Регулярные обзоры спринтов и ретроспективы позволяют выявлять и устранять риски на ранних стадиях.
Прозрачность и видимость:
Регулярные встречи, такие как ежедневные стендапы, обзоры спринтов и ретроспективы спринтов, способствуют эффективному сотрудничеству членов команды, владельца продукта и скрам-мастера и обеспечивают прозрачность работы команды.
Личный вклад каждого участника команды очевиден на ежедневных Scrum-совещаниях.
Кроме того, постоянные коммуникации между членами команды позволяют недостаток опыта или квалификации повысить за счет информации и помощи от коллег. 
Улучшение качества продукта:
Частое тестирование и обратная связь от пользователей помогают улучшать качество продукта на каждом этапе.
Главный принцип Скрама — работа как можно более короткими итерациями (спринтами) с поставкой и сбором обратной связи от заказчика. Короткие спринты уменьшают потери в случае разработки не того или не так, как нужно клиенту. 

Недостатки Scrum
 Scrum очень требователен к команде проекта:
Она должна быть небольшой (5-9 человек) и кроссфункциональной - то есть члены команды должны обладать более чем одной компетенцией, необходимой для реализации проекта. Например разработчик ПО должен обладать познаниями в тестировании и бизнес-аналитике. Уход любого члена команды может оказать существенное влияние на ход проекта. Кроме того, члены команды должны быть «командными игроками», активно брать на себя ответственность и уметь самоорганизовываться.
Подобрать такую зрелую команду очень непросто!
Может быть неподходящим для долгосрочного планирования:
В Scrum сложнее проводить долгосрочное планирование по срокам и бюджету из-за ориентации на краткосрочные спринты. 
 Риски недостаточной документации:
Поскольку акцент ставится на рабочий продукт, документация может быть менее детальной, что может усложнить поддержку и развитие проекта в будущем.
Сюда  же можно отнести сложности при заключении договоров, так как Scrum метод, в принципе, не подразумевает наличие фиксированного бюджета и фиксированного технического задания, что затрудняет юридическое оформление такого рода договоренностей
Scrum — инкрементальный подход (мост по Scrum не построить)
Поставка продукта небольшими полезными заказчику инкрементами возможна не всегда. Есть проекты, где продукт нужен целиком, частично он или бесполезен (булочка вместо хот-дога) или невозможно постепенно наращивать функционал.
  Траты временного ресурса
Ежедневные скрам-встречи и частые обзоры требуют значительных временных ресурсов. Издержки на «болтовню» могут составлять 10-30%.

16. Что такое ретроспектива?
Ретроспектива — специальная встреча, которая проводится по итогам одного или нескольких спринтов. На ней команда подводит итоги проделанной работы и рефлексирует о проведенном времени.
Основная цель ретроспективы — создать безопасное пространство для общения команды. На ней каждый участник может поделиться тревогами и проблемами. Выявление и решение проблем в перспективе должно повысить эффективность работы над проектом.

17. Kanban- это? (опишите подробно)
Методология Kanban - это подход к управлению процессами разработки и производства, ориентированный на обеспечение гибкости и оптимизации рабочего процесса.
Сосредоточен на управлении потоком задач с помощью визуального представления работы на доске Kanban, что позволяет команде контролировать процесс разработки и быстро реагировать на изменения.

18. Преимущества и недостатки Kanban?
Преимущества KANBAN:
1. Визуализация работы. Использование доски Канбан позволяет командам легко видеть, какие задачи находятся в процессе выполнения, какие задачи ожидают выполнения, а какие задачи завершены. Такая визуализация помогает командам понять поток работы и выявить узкие места, которые затем можно устранить, чтобы улучшить выполнение задач.
2. Гибкость. Канбан — это гибкий метод, который не предписывает определенный набор практик или ролей. Это позволяет командам постоянно совершенствовать свои рабочие процессы и вносить изменения по мере необходимости, что может привести к более эффективному и результативному предоставлению ценности клиенту.
3. Ориентация на непрерывную постановку задач. Ориентация Канбан на непрерывное предоставление ценности означает, что команды могут работать над задачами по мере их поступления, а не ждать начала определенного спринта. Это может помочь обеспечить более быстрое и эффективное выполнение работы, а также более быстрое получение ценности клиентом.
4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность.
Недостатки KANBAN:
1. Отсутствие структуры. Хотя гибкость Канбан может быть сильной стороной, она может быть и слабой стороной. Командам может быть трудно работать эффективно без определенного набора практик и ролей, что может привести к путанице и неэффективности.
2. Отсутствие временных рамок. Канбан не устанавливает конкретную продолжительность времени для работы, и это может затруднить эффективное планирование и расстановку приоритетов. Командам может быть трудно определить, когда задача завершена, и это может привести к задержкам и отсутствию прогресса.
3. Ограниченное количество ретроспектив спринта. Одним из ключевых преимуществ Scrum является ретроспектива спринта, которая позволяет командам проанализировать свою работу и определить области для улучшения. В Kanban нет аналогичного процесса, и это может затруднить командам постоянное совершенствование рабочих процессов.
4. Отсутствие расстановки приоритетов. Канбан не устанавливает конкретные приоритеты для работы, и это может затруднить для команд определение того, какая работа должна быть выполнена в первую очередь. Командам может быть трудно определить, какая работа является наиболее важной, что может привести к задержкам и отсутствию прогресса.

19. Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
SDLC (Software Development Life Cycle)– жизненный цикл разработки программного обеспечения - процесс, направленный на создание и поддержание работоспособности, качества и надежности ПО.
SDLC — это процесс поэтапной разработки программного обеспечения в следующем порядке:
1) Анализ и сбор требований (планирование):
анализ затрат и выгод, составление расписания, оценка и распределение ресурсов.
2) Дизайн и проектирование:
инженеры-программисты анализируют требования и определяют наилучшие решения для создания программного обеспечения. 
3) Разработка программного обеспечения:
преобразовать прототип системы, созданный на этапе дизайна, в рабочую информационную систему, отвечающую всем задокументированным системным требованиям.
4) Тестирование:
регулирует обеспечение качественной работы продукта.
5) Развертывание:
кодирование и тестирование на копии программного обеспечения, отличной от той, к которой имеют доступ пользователи. 
6) Обслуживание и поддержка:
обеспечение того, чтобы потребности продолжали удовлетворяться и чтобы система продолжала работать в соответствии со спецификацией.

20. Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?
STLC (Software Testing Lifecycle) - Жизненный цикл тестирования ПО - жизненный цикл тестирования программного обеспечения, который описывает процесс тестирования от его планирования до завершения. 
STLC помогает убедиться в том, что разрабатываемое программное обеспечение работает правильно и соответствует заданным требованиям.
Цикл состоит из основных этапов:
1)Планирование тестирования (Test Planning):
На этом этапе разрабатывается общий план тестирования. Определяются цели, объём, ресурсы и график тестирования. Также выбираются подходы и методы тестирования.
Создаются документы, такие как тестовый план, который описывает, что будет тестироваться, как, когда и кем.
2)Анализ требований (Requirement Analysis):
Тестировщики изучают требования и спецификации проекта, чтобы понять, что должно быть протестировано.
Выявляются тестовые случаи и сценарии, основанные на функциональных и нефункциональных требованиях.
3)Разработка тестовых сценариев (Test Design):
Создаются тестовые случаи и сценарии на основе анализа требований.
Тестовые случаи описывают, какие шаги нужно выполнить для проверки определённого требования или функционала, а также ожидаемые результаты.
4)Настройка тестовой среды (Test Environment Setup):
Подготавливается окружение, в котором будет проводиться тестирование. Это может включать настройку серверов, баз данных, инструментов тестирования и других ресурсов.
Убедитесь, что все необходимые данные и доступы для тестирования готовы.
5)Исполнение тестов (Test Execution):
На этом этапе тестировщики выполняют тестовые случаи, фиксируя результаты выполнения.
Все найденные ошибки документируются и передаются в команду разработки для исправления.
6)Отслеживание дефектов (Defect Tracking):
Все выявленные дефекты регистрируются в системе отслеживания дефектов.
После исправления дефектов проводится повторное тестирование (регрессионное тестирование) для проверки, что исправление не повлияло на другие функциональности.
7)Тестирование завершено (Test Closure):
По завершении тестирования подготавливаются итоги, которые могут включать отчёты о тестировании, анализ покрытий и выявленных дефектов.
Оценивается, достигли ли цели тестирования, и принимаются решения о подтверждении или отклонении релиза.